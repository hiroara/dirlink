// Package cmd Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// cmd/data/templates/.dirlink.yaml
// cmd/data/templates/.dirlink.yaml.swp
package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdDataTemplatesDirlinkYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xca\xcc\x4b\xb1\xe2\x52\x50\x28\x4e\xcc\x2d\xc8\x49\x35\x04\x31\x15\x14\x8a\x8b\x92\xad\x14\xf4\x0b\x12\x4b\x32\xf4\xf3\xd3\xf4\x8b\xf3\x4b\x8b\x92\x53\xf5\x53\x32\x8b\xc0\x92\x39\x99\x79\xd9\xc5\x10\x75\xba\x50\x45\x25\xf9\xfa\x20\x51\x43\x6c\x82\x46\x5c\x80\x00\x00\x00\xff\xff\x56\x0a\xe8\xc0\x63\x00\x00\x00")

func cmdDataTemplatesDirlinkYamlBytes() ([]byte, error) {
	return bindataRead(
		_cmdDataTemplatesDirlinkYaml,
		"cmd/data/templates/.dirlink.yaml",
	)
}

func cmdDataTemplatesDirlinkYaml() (*asset, error) {
	bytes, err := cmdDataTemplatesDirlinkYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/data/templates/.dirlink.yaml", size: 99, mode: os.FileMode(420), modTime: time.Unix(1582361298, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cmdDataTemplatesDirlinkYamlSwp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xd9\xbf\x4e\xeb\x30\x14\x06\xf0\xaf\x77\xb8\xd2\x1d\xae\x82\xe0\x05\x0c\xcc\xcd\x69\xcb\x52\xe5\x0d\x18\x90\x58\x60\x44\x72\xfe\xb4\xb5\xea\xc4\x91\xe3\x22\xb1\x00\x2f\xc2\xca\x03\xf0\x12\xec\x5d\x79\x03\x06\xd8\x99\x50\xdb\x74\x00\x51\xb1\x20\x10\xd2\xf7\x5b\xce\xc9\xc9\xa7\xc4\x8b\x07\xcb\x69\xef\xf4\xf0\x48\x0d\xe3\x1e\x00\x6c\x01\xf3\xc7\xe3\xb3\xa7\xdb\xeb\x7f\xe6\x01\x98\x18\xef\xa6\x06\x9f\x5a\xe4\xba\x65\x5a\x7b\x17\x5b\x97\x69\xbb\x29\x77\xb9\xfa\xa0\xe4\xc5\xb9\x8c\x9d\xd5\xd5\x58\x1a\x9f\xc9\xd8\x84\xc9\x2c\x8d\x33\x57\xca\x22\xa0\xbd\x96\xdc\x78\x6b\xaa\xa9\x64\x65\x2e\xb9\x0e\x5a\x42\x51\xd6\x56\x87\xa2\x91\xb8\x7d\x17\x5f\xe8\x72\xe3\x9f\x88\xe8\x8d\x59\x18\x75\x87\xff\x71\x30\xe8\x2f\xb7\xfa\xfe\xde\xae\xda\xd9\x3e\xf9\xe9\x55\x11\x11\x11\x11\x11\xd1\x37\x0a\x75\x07\x57\x00\xfe\xb4\xcf\x7f\xdb\xda\x79\x57\x89\x88\x88\x88\x88\x88\x88\xe8\xf7\xd2\x39\x60\x22\xe0\x26\x5a\xdd\xff\xaf\xcf\xff\x2f\x11\xf0\x1c\x01\xf3\x08\xb8\x8f\x80\xbb\x75\x86\x88\x88\x88\x88\x88\x88\x88\xbe\x96\x52\x4a\x75\x95\xd4\x3a\x4c\x24\x38\xb1\xa6\x9a\x0e\x3e\x1a\xf6\x97\xc3\x45\xd7\x24\xcb\xb6\xf1\x59\xd2\x46\xdc\x48\x1a\x37\xf3\x59\x21\xb9\xf1\x50\xaa\xd1\x65\x6d\x8b\x7e\x82\xd4\x54\x79\x82\xd7\x00\x00\x00\xff\xff\x76\x61\xf9\x11\x00\x30\x00\x00")

func cmdDataTemplatesDirlinkYamlSwpBytes() ([]byte, error) {
	return bindataRead(
		_cmdDataTemplatesDirlinkYamlSwp,
		"cmd/data/templates/.dirlink.yaml.swp",
	)
}

func cmdDataTemplatesDirlinkYamlSwp() (*asset, error) {
	bytes, err := cmdDataTemplatesDirlinkYamlSwpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/data/templates/.dirlink.yaml.swp", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1582361302, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/data/templates/.dirlink.yaml":     cmdDataTemplatesDirlinkYaml,
	"cmd/data/templates/.dirlink.yaml.swp": cmdDataTemplatesDirlinkYamlSwp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"templates": &bintree{nil, map[string]*bintree{
				".dirlink.yaml":     &bintree{cmdDataTemplatesDirlinkYaml, map[string]*bintree{}},
				".dirlink.yaml.swp": &bintree{cmdDataTemplatesDirlinkYamlSwp, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
